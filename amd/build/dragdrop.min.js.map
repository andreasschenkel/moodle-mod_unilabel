{"version":3,"file":"dragdrop.min.js","sources":["../src/dragdrop.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @author     Andreas Grabs <moodle@grabs-edv.de>\n * @copyright  2024 Andreas Grabs\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport config from 'core/config';\n\nvar _formid;\nvar _type;\n\nconst getDraggableItems = (formid) => {\n    let fieldsets = document.querySelectorAll('#' + formid + ' fieldset');\n    const items = [];\n    fieldsets.forEach(fieldset => {\n        if (fieldset.id.startsWith('id_singleelementheader_')) {\n            items.push(fieldset);\n        }\n    });\n    return items;\n};\n\nconst initDragElement = (item, index) => {\n    // Add the class \"dragging\" a little later to get the dragging image visible.\n    item.classList.add('draggable');\n    item.dataset.index = index;\n};\n\nconst resortList = () => {\n    // Set the new sortorder;\n    let i = 0;\n    log.debug('Changed sortorder');\n    document.querySelectorAll('#' + _formid + ' fieldset.draggable').forEach(sortitem => {\n        let elementindex = sortitem.dataset.index;\n        let hiddenelement = document.forms[_formid].elements['unilabeltype_' + _type + '_sortorder[' + elementindex + ']'];\n        let oldvalue = hiddenelement.value;\n        hiddenelement.value = i + 1;\n        log.debug('Element: ' + elementindex + ' - old value: ' + oldvalue + ', new value: ' + hiddenelement.value);\n        i++;\n    });\n};\n\n// Export our init method.\nexport const init = (type, formid) => {\n    _type = type;\n    _formid = formid;\n    const items = getDraggableItems(formid);\n    let index = 0;\n    items.forEach(item => {\n        initDragElement(item, index);\n        index++;\n    });\n\n    // Add event listener for new items.\n    document.querySelector('#' + formid).addEventListener('itemadded', (e) => {\n        log.debug('New element created with index: ' + e.detail);\n        var newitem = document.querySelector('#id_singleelementheader_' + e.detail);\n        initDragElement(newitem, e.detail);\n        resortList();\n    });\n    // Add event listener if item is removed.\n    document.querySelector('#' + formid).addEventListener('itemremoved', (e) => {\n        log.debug('Element has been deleted: ' + e.detail);\n        resortList();\n    });\n\n    // Import Sortable from 'js/Sortable.js';\n    return import(config.wwwroot + '/mod/unilabel/js/Sortable.min.js').then((Sortable) => {\n        const mysortablelist = document.querySelector('#' + formid);\n        var sortable = Sortable.create(\n            mysortablelist,\n            {\n                draggable: '.draggable',\n                handle: '.draghandle',\n                animation: 150,\n                swapThreshold: 0.50,\n                onEnd: (e) => {\n                    log.debug(e.item);\n                    resortList();\n                }\n            }\n        );\n        log.debug('Initialized sortable list');\n        return sortable;\n    });\n\n\n};\n"],"names":["_formid","_type","initDragElement","item","index","classList","add","dataset","resortList","i","debug","document","querySelectorAll","forEach","sortitem","elementindex","hiddenelement","forms","elements","oldvalue","value","type","formid","items","fieldsets","fieldset","id","startsWith","push","getDraggableItems","querySelector","addEventListener","e","detail","newitem","config","wwwroot","then","Sortable","mysortablelist","sortable","create","draggable","handle","animation","swapThreshold","onEnd"],"mappings":"gQAyBIA,QACAC,4OAaEC,gBAAkB,CAACC,KAAMC,SAE3BD,KAAKE,UAAUC,IAAI,aACnBH,KAAKI,QAAQH,MAAQA,OAGnBI,WAAa,SAEXC,EAAI,eACJC,MAAM,qBACVC,SAASC,iBAAiB,IAAMZ,QAAU,uBAAuBa,SAAQC,eACjEC,aAAeD,SAASP,QAAQH,MAChCY,cAAgBL,SAASM,MAAMjB,SAASkB,SAAS,gBAAkBjB,MAAQ,cAAgBc,aAAe,KAC1GI,SAAWH,cAAcI,MAC7BJ,cAAcI,MAAQX,EAAI,eACtBC,MAAM,YAAcK,aAAe,iBAAmBI,SAAW,gBAAkBH,cAAcI,OACrGX,sBAKY,CAACY,KAAMC,UACvBrB,MAAQoB,KACRrB,QAAUsB,aACJC,MAnCiBD,CAAAA,aACnBE,UAAYb,SAASC,iBAAiB,IAAMU,OAAS,mBACnDC,MAAQ,UACdC,UAAUX,SAAQY,WACVA,SAASC,GAAGC,WAAW,4BACvBJ,MAAMK,KAAKH,aAGZF,OA2BOM,CAAkBP,YAC5BlB,MAAQ,SACZmB,MAAMV,SAAQV,OACVD,gBAAgBC,KAAMC,OACtBA,WAIJO,SAASmB,cAAc,IAAMR,QAAQS,iBAAiB,aAAcC,iBAC5DtB,MAAM,mCAAqCsB,EAAEC,YAC7CC,QAAUvB,SAASmB,cAAc,2BAA6BE,EAAEC,QACpE/B,gBAAgBgC,QAASF,EAAEC,QAC3BzB,gBAGJG,SAASmB,cAAc,IAAMR,QAAQS,iBAAiB,eAAgBC,iBAC9DtB,MAAM,6BAA+BsB,EAAEC,QAC3CzB,iOAIU2B,gBAAOC,QAAU,8TAAjBD,gBAAOC,QAAU,8FAAjBD,gBAAOC,QAAU,sCAAoCC,MAAMC,iBAC/DC,eAAiB5B,SAASmB,cAAc,IAAMR,YAChDkB,SAAWF,SAASG,OACpBF,eACA,CACIG,UAAW,aACXC,OAAQ,cACRC,UAAW,IACXC,cAAe,GACfC,MAAQd,iBACAtB,MAAMsB,EAAE7B,MACZK,oCAIRE,MAAM,6BACH8B"}