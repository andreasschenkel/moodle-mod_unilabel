{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\nimport log from 'core/log';\nimport cfg from 'core/config';\n\n/**\n * Initialize the imageboard renderer.\n *\n * @param {Integer} canvaswidth\n * @param {Integer} canvasheight\n * @param {String} gridcolor\n * @param {Integer} xsteps\n * @param {Integer} ysteps\n */\nexport const init = async(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) => {\n    canvaswidth = parseInt(canvaswidth, 10);\n    canvasheight = parseInt(canvasheight, 10);\n    xsteps = parseInt(xsteps, 10);\n    ysteps = parseInt(ysteps, 10);\n\n    let emptyPictureSrc = cfg.wwwroot + '/mod/unilabel/type/imageboard/pix/empty-picture.gif';\n\n    let imageList = new Array();\n    let lastImageNumber = -1;\n\n    // The next calls depends on each other, so we wait for each of them to be ready.\n    await registerAllEventlistener();\n    await refreshBackgroundImage();\n    await refreshAllImages();\n    await renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n\n    // In preview only ONE helpergrid exists with number 0...\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-0\");\n    const togglerText = gridtoggler.querySelector('.unilabeltype-imageboard-toggle-text');\n    gridtoggler.addEventListener(\"click\", function(event) {\n        const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-0\");\n        event.stopPropagation();\n        event.preventDefault();\n        if (helpergrid.classList.contains(\"hidden\")) {\n            showGrid(togglerText, helpergrid);\n        } else {\n            hideGrid(togglerText, helpergrid);\n        }\n    });\n\n    const imageboarddraganddrop = await import('unilabeltype_imageboard/imageboarddraganddrop');\n    imageboarddraganddrop.init();\n\n    /**\n     * Helper function to show the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function showGrid(button, helpergrid) {\n        helpergrid.classList.remove(\"hidden\");\n        button.value = 'gridvisible';\n        Str.get_string('buttonlabelhelpergridhide', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * Helper function to remove the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function hideGrid(button, helpergrid) {\n        helpergrid.classList.add(\"hidden\");\n        button.value = 'gridhidden';\n        Str.get_string('buttonlabelhelpergridshow', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    async function onChangeAttribute(event) {\n        var number = getNumberFromEvent(event);\n        if (number >= 0) {\n            refreshImage(number);\n        // } else {\n        //     // TODO: only refresh if titlecolor, titlebackgroundcolor, titlesize was changed.\n        //     await refreshAllImages();\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onRightclick(event) {\n        event.preventDefault();\n        // Get the number of the image that was selected with the right mouse button\n        var idoftarget = event.target.getAttribute('id');\n        if (!idoftarget) {\n            return;\n        }\n\n        // Check, if idoftarget ist an id of an image\n        let technicalnumber = idoftarget.split('unilabel-imageboard-imageid-')[1];\n        // Oder ein Titel wurde angeklickt\n        if (!technicalnumber) {\n            technicalnumber = idoftarget.split('id_elementtitle-')[1];\n        }\n        if (technicalnumber) {\n            showSettingsOfImage(technicalnumber);\n        }\n        // Update coordinates\n        let coordinates = document.getElementById('unilabel-imageboard-coordinates');\n        let imagedata = getAllImagedataFromForm(technicalnumber);\n        coordinates.innerHTML = (parseInt(technicalnumber) + 1) + \": \" + imagedata.xposition + \" / \" + imagedata.yposition;\n        console.log('coordinates=', coordinates);\n    }\n\n    /**\n     * Hides all setting of elements by adding d-none and removes d-none only for element with the specified number.\n     * @param {int} number\n     */\n    function showSettingsOfImage(number) {\n        // In order do know how many elements are existing in the imageboard we search for\n        // fitem_id_unilabeltype_imageboard_title_ . The length tells us how many elements exists.\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            let wrapperOfElement = getWrapper(i);\n            if (wrapperOfElement && number == i) {\n                // If it is the selected element we have to remove display none (bootstrap class d-none).\n                wrapperOfElement.classList.remove('d-none');\n            } else {\n                // We will hide all other element settings.\n                wrapperOfElement.classList.add('d-none');\n            }\n        }\n    }\n\n    /**\n     * This function looks for an element in the dom that belongs to an given id and then returns the\n     * surrounding wrapper div.\n     *\n     * @param {number} number\n     * @returns {*}\n     */\n    function getWrapper(number) {\n        console.log(\"getWrapper number=\", number);\n        let element = document.getElementById('fitem_id_unilabeltype_imageboard_title_' + number);\n        console.log(\"element =\", element);\n        let wrapperElement = element.closest(\".elementwrapper\");\n        if (wrapperElement) {\n            return wrapperElement;\n        }\n        return null;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @returns {*}\n     */\n    function getNumberFromEvent(event) {\n        // If there is a focusout event from one of the following input fields then evaluate\n        // the number of the element that was changed.\n        let imageidselectors = [\n            'id_unilabeltype_imageboard_title_',\n            'id_unilabeltype_imageboard_alt_',\n            'id_unilabeltype_imageboard_xposition_',\n            'id_unilabeltype_imageboard_yposition_',\n            'id_unilabeltype_imageboard_targetwidth_',\n            'id_unilabeltype_imageboard_targetheight_',\n            'id_unilabeltype_imageboard_border_',\n            'id_unilabeltype_imageboard_borderradius_',\n        ];\n        const eventid = event.target.getAttribute('id');\n        for (let i = 0; i < imageidselectors.length; i++) {\n            if (eventid.includes(imageidselectors[i])) {\n                return eventid.split(imageidselectors[i])[1];\n            }\n        }\n        // If focus out was NOT from one of our inputfield then return a number less than zero.\n        return -1;\n    }\n\n    /**\n     * Add a new preview image when a new element is added.\n     */\n    function onAddElement() {\n        addImageToDom(parseInt(lastImageNumber) + 1);\n    }\n\n    /**\n     * Remove the preview image related to the element which was removed.\n     * The index of the element comes from the detail property of the event object.\n     * @param {*} event\n     */\n    function onRemoveElement(event) {\n        let removedImage = document.querySelector('#unilabel-imageboard-element-' + event.detail);\n        if (removedImage) {\n            removedImage.remove();\n        }\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    async function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All change events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"change\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // All keyup events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"keyup\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // If there is a new element added, the event \"itemadded\" is fired and we can add a new preview image.\n        mform.addEventListener(\"itemadded\", (event) => {\n            onAddElement(event);\n        });\n\n        // If there is an element removed, the event \"itemremoved\" is fired and we can remove the related preview image.\n        mform.addEventListener(\"itemremoved\", (event) => {\n            onRemoveElement(event);\n        });\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"contextmenu\", onRightclick, false);\n\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // TODO: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        require(['core_form/events'], function(FormEvent) {\n            backgroundfileNode.addEventListener(FormEvent.eventTypes.uploadChanged, (event) => {\n                // In the event object the target is the filemanager we want to access.\n                const filemanager = event.target;\n                const interval = setInterval(async() => {\n                    // As long the filemanager is updating, e.g. while uploading large images, we have to wait.\n                    if (!filemanager.classList.contains('fm-updating')) {\n                        clearInterval(interval);\n                        // If the filemanager does not have any items we can reset our preview image.\n                        if (filemanager.classList.contains('fm-noitems')) {\n                            // The filemanager caches the last loaded image, so we would not realy know\n                            // if it is deleted. To make sure we know later too, we remove that cached image.\n                            let img = event.target.getElementsByTagName('img')[0];\n                            img.remove();\n                            // Now reset the preview image.\n                            refreshBackgroundImage();\n                        }\n                    }\n                }, 100);\n            });\n        });\n\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            canvasx.addEventListener('change', refreshBackgroundImage);\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            canvasy.addEventListener('change', refreshBackgroundImage);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    async function refreshBackgroundImage() {\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-canvas');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // TODO: Do wie need this code? Just to indicate changes during dev.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // TODO: If (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // TODO: check if this is needed. just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        }\n        log.debug('canvas size changed');\n        const myevent = new CustomEvent('canvaschanged');\n        document.dispatchEvent(myevent);\n    }\n\n    /**\n     * Create the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n        let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n        let combined = \"<div>\" + imageboardcontainer + \"</div>\" + gridcontent.resultHtml;\n        Templates.replaceNodeContents('#imageboardcontainer', combined, gridcontent.resultJs);\n        // TODO: Check.\n        return;\n    }\n\n    /**\n     * Refresh the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridContainer = document.querySelector('#unilabeltype-imageboard-helpergrid-0');\n        if (gridContainer) {\n            let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n            let newGrid = createElementFromHTML(gridcontent.resultHtml);\n            gridContainer.replaceWith(newGrid);\n            Templates.runTemplateJS(gridcontent.resultJs);\n        } else {\n            log.debug('No grid found :(');\n        }\n    }\n\n    /**\n     * Create the helpergrid and returns the created html.\n     * @param {*} canvaswidth\n     * @param {*} canvasheight\n     * @param {*} gridcolor\n     * @param {*} xsteps\n     * @param {*} ysteps\n     * @returns {*} An object with the properties \"resultHtml\" and \"resultJs\".\n     */\n    async function getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let helpergrids = [];\n        for (let y = 0; y < canvasheight; y += ysteps) {\n            for (let x = 0; x < canvaswidth; x += xsteps) {\n                let helpergrid = {};\n                helpergrid.x = x;\n                helpergrid.y = y;\n                if (x + xsteps > canvaswidth) {\n                    helpergrid.xsteps = (x + xsteps) - canvaswidth;\n                }\n                if (y + ysteps > canvasheight) {\n                    helpergrid.ysteps = (y + ysteps) - canvasheight;\n                }\n                helpergrids.push(helpergrid);\n            }\n        }\n        // In preview only one helpergrid exists .... we use cmid = 0.\n        const context = {\n            // Data to be rendered\n            helpergrids: helpergrids,\n            gridcolor: gridcolor,\n            xsteps: xsteps,\n            ysteps: ysteps,\n            cmid: 0,\n            hidden: 0\n        };\n        var resultHtml = '';\n        var resultJs = '';\n        await Templates.renderForPromise('unilabeltype_imageboard/imageboard_helpergridpreview', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Rendering failed');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * This function is designed as async function, so we can wait till all depending actions are ready.\n     */\n    async function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // TODO: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already the elment for the image with number xyz.\n            if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n                // Add the new image and wait till it is rendered.\n                await addImageToDom(number);\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            } else {\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {Integer} number\n     */\n    async function addImageToDom(number) {\n        // If there is an invalid number, we do nothing.\n        if (number < 0) {\n            return;\n        }\n\n        // Check whether the image has to be created.\n        if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n            // Get the rendered html for the new preview image.\n            let result = await renderAddedImage(number);\n            if (result.resultHtml) {\n                // Place the new rendered image at the end of the div all preview images are in.\n                document.querySelector('#imageboardcontainer div').insertAdjacentHTML('beforeend', result.resultHtml);\n                // Run the JS for the new image. This actually does nothing but sometime it will.\n                Templates.runTemplateJS(result.resultJs);\n\n\n                // Add listeners to the filemanager.\n                let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n                if (imagefileNode) {\n                    // Add the listener to watch changes in the filemanager.\n                    // We use this to be aware of deleted images.\n                    // From core_form/events come the event types. We use the event type \"uploadChanged\".\n                    require(['core_form/events'], function(FormEvent) {\n                        imagefileNode.addEventListener(FormEvent.eventTypes.uploadChanged, (event) => {\n                            // In the event object the target is the filemanager we want to access.\n                            const filemanager = event.target;\n                            const interval = setInterval(async() => {\n                                // As long the filemanager is updating, e.g. while uploading large images, we have to wait.\n                                if (!filemanager.classList.contains('fm-updating')) {\n                                    clearInterval(interval);\n                                    // If the filemanager does not have any items we can reset our preview image.\n                                    if (filemanager.classList.contains('fm-noitems')) {\n                                        // The filemanager caches the last loaded image, so we would not realy know\n                                        // if it is deleted. To make sure we know later too, we remove that cached image.\n                                        let img = event.target.getElementsByTagName('img')[0];\n                                        img.remove();\n                                        // Now reset the preview image.\n                                        resetPreviewImage(number);\n                                    }\n                                }\n                            }, 100);\n                        });\n                    });\n\n                    // Add the mutation listener for the filepicker element related to the new image.\n                    let observer = new MutationObserver(async() => {\n                        await addImageToDom(number);\n                        // Refresh the presentation of the image.\n                        refreshImage(number);\n                    });\n                    observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n                }\n            }\n        } else {\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     * Reset the preview image if the image is deleted but the element is still there.\n     * @param {Integer} number\n     */\n    function resetPreviewImage(number) {\n        let prevImg = document.querySelector('#unilabel-imageboard-imageid-' + number);\n        prevImg.setAttribute('src', emptyPictureSrc);\n        prevImg.style.background = 'none';\n        prevImg.style.height = 'auto';\n        prevImg.style.width = 'auto';\n        prevImg.style.border = 'none';\n        prevImg.style.borderRadius = 0;\n        log.debug('Image nr ' + number + ' removed');\n        document.getElementById('id_unilabeltype_imageboard_targetwidth_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_targetheight_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_border_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_borderradius_' + number).value = 0;\n    }\n\n    /**\n     *\n     * @param {number} number of\n     */\n    async function renderAddedImage(number) {\n        if (imageList.includes(number)) {\n            return {};\n        }\n        lastImageNumber = number;\n        imageList.push(lastImageNumber);\n        const context = {\n            // Data to be rendered\n            number: number,\n            displaynumber: parseInt(number) + 1,\n            title: \"title\",\n            src: emptyPictureSrc\n        };\n\n        let resultHtml;\n        let resultJs;\n        await Templates.renderForPromise('unilabeltype_imageboard/previewimage', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Error while rendering from template');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refresh\n     * this image.\n     * @param {Integer} number\n     */\n    async function refreshImage(number) {\n        // Only refresh a real image with a positive number.\n        if (number >= 0) {\n            let imageid = document.getElementById(\"unilabel-imageboard-imageid-\" + number);\n            if (imageid) {\n                // Fill all the needed values for imagedata.\n                let imagedata = getAllImagedataFromForm(number);\n                imageid.style.background = imagedata.titlebackgroundcolor;\n                imageid.src = imagedata.src;\n\n                if (imagedata.src === \"\") {\n                    // Hide the image div.\n                    imageid.classList.add(\"hidden\");\n                } else {\n                    imageid.classList.remove(\"hidden\");\n                    imageid.alt = imagedata.alt;\n                }\n\n                const imagediv = document.getElementById('unilabel-imageboard-element-' + number);\n                imagediv.style.left = parseInt(imagedata.xposition) + \"px\";\n                imagediv.style.top = parseInt(imagedata.yposition) + \"px\";\n\n                // Switch to the correct class eg \"unilable-imageboard-titlelineheight-4 if lineheight = 4.\n                const idelementtitle = document.getElementById('id_elementtitle-' + number);\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-0\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-1\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-2\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-3\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-4\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-5\");\n                const dummy = \"unilable-imageboard-titlelineheight-\" + imagedata.titlelineheight;\n                idelementtitle.classList.add(dummy);\n\n                if (imagedata.targetwidth != 0) {\n                    imageid.style.width = imagedata.targetwidth + \"px\";\n                } else {\n                    imageid.style.width = \"auto\";\n                }\n                if (imagedata.targetheight != 0) {\n                    imageid.style.height = imagedata.targetheight + \"px\";\n                } else {\n                    imageid.style.height = \"auto\";\n                }\n                if (imagedata.title != \"\") {\n                    imageid.title = (parseInt(number) + 1) + \": \" + imagedata.title;\n                } else {\n                    imageid.title = (parseInt(number) + 1) + \": \";\n                }\n                if (imagedata.border != 0) {\n                    imageid.style.border = imagedata.border + \"px solid\";\n                    imageid.style.borderColor = imagedata.titlebackgroundcolor;\n                } else {\n                    imageid.style.border = \"0\";\n                }\n                if (imagedata.borderradius != 0) {\n                    imageid.style.borderRadius = imagedata.borderradius + \"px\";\n                } else {\n                    imageid.style.borderRadius = \"0\";\n                }\n\n                // Title above image.\n                const elementtitle = document.getElementById('id_elementtitle-' + number);\n                elementtitle.innerHTML = imagedata.title;\n                elementtitle.style.color = imagedata.titlecolor;\n                elementtitle.style.backgroundColor = imagedata.titlebackgroundcolor;\n                elementtitle.style.fontSize = imagedata.fontsize + \"px\";\n                elementtitle.style.borderRadius = imagedata.borderradius + \"px\";\n            }\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {Integer} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            alt: 'id_unilabeltype_imageboard_alt_' + number,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n            coordinates: \"unilabel-imageboard-coordinates\",\n            // For all images we wil use the same div to show the coorinates\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.alt = document.getElementById(imageids.alt).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Get the src of the draftfile.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = emptyPictureSrc;\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        let div = document.getElementById(imageids.coordinates);\n        if (div) {\n            if (imagedata.xposition === \"\") {\n                // If an element was added the coordinates are empty ...\n                imagedata.xposition = 0;\n            }\n            if (imagedata.yposition === \"\") {\n                imagedata.yposition = 0;\n            }\n            // This will update the coordinates in the html.\n            div.innerHTML = (parseInt(number) + 1) + \": \" + imagedata.xposition + \" / \" + imagedata.yposition;\n        }\n        return imagedata;\n    }\n\n    /**\n     * This is a helper function to create an html element which can be used to replace another element.\n     *\n     * @param {String} htmlString\n     * @returns {Element}\n     */\n    function createElementFromHTML(htmlString) {\n        var div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n\n        // Change this to div.childNodes to support multiple top-level nodes.\n        return div.firstChild;\n    }\n};\n"],"names":["async","canvaswidth","canvasheight","gridcolor","xsteps","ysteps","parseInt","emptyPictureSrc","cfg","wwwroot","imageList","Array","lastImageNumber","mform","document","querySelectorAll","addEventListener","onChangeAttribute","event","addImageToDom","removedImage","querySelector","detail","remove","onRemoveElement","onRightclick","backgroundfileNode","getElementById","require","FormEvent","eventTypes","uploadChanged","filemanager","target","interval","setInterval","classList","contains","clearInterval","getElementsByTagName","refreshBackgroundImage","MutationObserver","observe","attributes","childList","subtree","canvasx","canvasy","registerAllEventlistener","singleElements","i","length","number","getAttribute","split","refreshImage","refreshAllImages","gridcontent","getHelpergrid","combined","innerHTML","resultHtml","replaceNodeContents","resultJs","renderHelpergrid","gridtoggler","togglerText","helpergrid","stopPropagation","preventDefault","button","value","Str","get_string","done","text","innerText","showGrid","add","hideGrid","imageidselectors","eventid","includes","getNumberFromEvent","idoftarget","technicalnumber","wrapperOfElement","getWrapper","showSettingsOfImage","coordinates","imagedata","getAllImagedataFromForm","xposition","yposition","console","log","element","wrapperElement","closest","previewimage","getElementsByClassName","backgrounddiv","backgroundurl","style","background","backgroundSize","backgroundImage","selectedOptions","width","height","refreshHelpergrid","debug","myevent","CustomEvent","dispatchEvent","gridContainer","newGrid","htmlString","div","createElement","trim","firstChild","replaceWith","runTemplateJS","helpergrids","y","x","push","context","cmid","hidden","Templates","renderForPromise","then","_ref","html","js","catch","result","displaynumber","title","src","_ref2","renderAddedImage","insertAdjacentHTML","imagefileNode","prevImg","setAttribute","border","borderRadius","resetPreviewImage","imageid","titlebackgroundcolor","alt","imagediv","left","top","idelementtitle","dummy","titlelineheight","targetwidth","targetheight","borderColor","borderradius","elementtitle","color","titlecolor","backgroundColor","fontSize","fontsize","imageids","imagetag","init"],"mappings":"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"}