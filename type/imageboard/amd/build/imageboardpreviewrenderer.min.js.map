{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\nimport log from 'core/log';\n\nexport const init = (canvaswidth, canvasheight, gridcolor, xsteps, ysteps) => {\n    canvaswidth = parseInt(canvaswidth, 10);\n    canvasheight = parseInt(canvasheight, 10);\n    xsteps = parseInt(xsteps, 10);\n    ysteps = parseInt(ysteps, 10);\n    registerAllEventlistener();\n    // Timeout notwendig, damit das Bild in der Draftarea \"vorhanden\" ist.\n    // document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');\n    setTimeout(refreshBackgroundImage, 1000);\n    // To show all images on pageload.\n    setTimeout(refreshAllImages, 1000);\n    setTimeout(function() {\n        renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n    }, 1000);\n\n    // In preview only ONE helpergrid exists with number 0...\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-0\");\n    const togglerText = gridtoggler.querySelector('.unilabeltype-imageboard-toggle-text');\n    gridtoggler.addEventListener(\"click\", function(event) {\n        const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-0\");\n        event.stopPropagation();\n        event.preventDefault();\n        if (helpergrid.classList.contains(\"hidden\")) {\n            showGrid(togglerText, helpergrid);\n        } else {\n            hideGrid(togglerText, helpergrid);\n        }\n    });\n\n    /**\n     * Helper function to show the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function showGrid(button, helpergrid) {\n        helpergrid.classList.remove(\"hidden\");\n        button.value = 'gridvisible';\n        Str.get_string('buttonlabelhelpergridhide', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * Helper function to remove the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function hideGrid(button, helpergrid) {\n        helpergrid.classList.add(\"hidden\");\n        button.value = 'gridhidden';\n        Str.get_string('buttonlabelhelpergridshow', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * This function handles all focus out events if the event is from on of our input fields.\n     *\n     * @param {event} event\n     */\n    function focusoutExecute(event) {\n        let imagenumber = -1;\n        // 1. Check where the focus out event was created form input or imagesetting input.\n        const eventid = event.target.getAttribute('id');\n        let eventsourceimagesetting = eventid.split(\"id-unilabeltype-imageboard-imagesettings-\")[1];\n        let eventsourceform = eventid.split(\"id_unilabeltype_imageboard_\")[1];\n\n        // ToDo:  Check if it is a focus out event has to be more precise ... Delete-Icon!!!!\n        if (typeof eventsourceimagesetting !== \"undefined\" || typeof eventsourceform !== \"undefined\") {\n            // 2. If ID starts with id_unilabeltype_imageboard_ then focus out came from form input fields.\n            if (typeof eventsourceimagesetting !== \"undefined\" && eventsourceimagesetting !== '') {\n                // Call updateForm and use as parameter the input field that should be updated in the form.\n                imagenumber = updateForm(eventsourceimagesetting);\n            }\n\n            // 3. ID starts with id_unilabeltype_imageboard_. Focus from the form The imagesettings must be updated.\n            if (typeof eventsourceform !== \"undefined\" && eventsourceform !== '') {\n                // A imagenumber = updateImagesetting(eventsourceform);\n                // We have to update all filed in imagesettingsdialog\n                // Sus dem event nun doch die nummer auslesen\n                let eventsourceformnumber = eventsourceform.substr(eventsourceform.length - 1, eventsourceform.length);\n                writeFormdataOfImageToImagesettingsdialogupdate(eventsourceformnumber);\n            }\n\n            // Now we know which image was changed and we can refresh on or all images.\n            if (imagenumber >= 0) {\n                refreshImage(imagenumber);\n            } else {\n                refreshAllImages();\n            }\n        }\n    }\n\n    /**\n     * Upates the input field in the mform\n     *\n     * @param {string} eventsourceimagesetting\n     * @returns {number}\n     */\n    function updateForm(eventsourceimagesetting) {\n        const imagenumber = parseInt(document.getElementById('id-unilabeltype-imageboard-imagesettings-number').innerHTML) - 1;\n        let value = document.getElementById('id-unilabeltype-imageboard-imagesettings-' + eventsourceimagesetting).value;\n        // Check if the value should be integer.\n        if (eventsourceimagesetting === 'xposition' ||\n            eventsourceimagesetting === 'yposition' ||\n            eventsourceimagesetting === 'border' ||\n            eventsourceimagesetting === 'borderradius') {\n            let num = Number(value);\n            if (value !== '' && !Number.isInteger(num)) {\n                return -1;\n            }\n        }\n\n        let field = document.getElementById('id_unilabeltype_imageboard_' + eventsourceimagesetting + '_' + imagenumber);\n        if (field !== null) {\n            field.value = value;\n        }\n        return imagenumber;\n    }\n\n    /**\n     *\n     * @param {number} technicalnumber\n     */\n    function writeFormdataOfImageToImagesettingsdialogupdate(technicalnumber) {\n        let selectedImage = getAllImagedataFromForm(technicalnumber);\n        // Den Imagesettings-Anzeigebereich aktualisieren\n        const imagesettingsNumber = document.getElementById('id-unilabeltype-imageboard-imagesettings-number');\n        imagesettingsNumber.innerHTML = (parseInt(selectedImage.technicalnumber) + 1);\n\n        const imagesettingsTitle = document.getElementById('id-unilabeltype-imageboard-imagesettings-title');\n        imagesettingsTitle.value = selectedImage.title;\n\n        const imagesettingsInputPositionX = document.getElementById('id-unilabeltype-imageboard-imagesettings-xposition');\n        imagesettingsInputPositionX.value = parseInt(selectedImage.xposition);\n        const imagesettingsInputPositionY = document.getElementById('id-unilabeltype-imageboard-imagesettings-yposition');\n        imagesettingsInputPositionY.value = parseInt(selectedImage.yposition);\n        const imagesettingsInputBorder = document.getElementById('id-unilabeltype-imageboard-imagesettings-border');\n        imagesettingsInputBorder.value = parseInt(selectedImage.border);\n\n        const imagesettingsInputBorderradius = document.getElementById('id-unilabeltype-imageboard-imagesettings-borderradius');\n        imagesettingsInputBorderradius.value = parseInt(selectedImage.borderradius);\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onclickExecute(event) {\n        var targetid = event.target.getAttribute('id');\n        var mform = targetid.split('button-mform1')[1];\n        if (mform) {\n            setTimeout(function() {\n                // An element was added so we have to add a div for the image to the dom.\n                let singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n                let number = singleElements.length;\n                addImageToDom(number - 1);\n            }, 500);\n        } else {\n            // Wenn kein Element hinzugefügt wird prüfen, ob man den Imagesettingsdialog ausblenden will.\n            var imagesettindgdialogid = event.target.getAttribute('id');\n            if (imagesettindgdialogid === 'id-unilabeltype-imageboard-imagesettings-close') {\n               imagesettingsdivvisibility('hidden');\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onRightclick(event) {\n       event.preventDefault();\n       // Get the number of the image that was selected with the right mouse button\n        var idoftarget = event.target.getAttribute('id');\n        if (!idoftarget) {\n          return;\n        }\n\n        // Check, if idoftarget ist an id of an image\n        let technicalnumber = idoftarget.split('unilabel-imageboard-imageid-')[1];\n        // Oder ein Titel wurde angeklickt\n        if (!technicalnumber) {\n            technicalnumber = idoftarget.split('id_elementtitle-')[1];\n        }\n        if (technicalnumber) {\n            // Update the imagesettingsdialog with the data of that image and show the dialog\n            writeFormdataOfImageToImagesettingsdialogupdate(technicalnumber);\n            // A imagesettingsdivvisibility('visible');\n            // Wenn das selectierte Bild eine andere nummer hat als das aktuelle imagesettings anzeigt dann auf jeden fall anzeigen\n            const imagenumber = parseInt(document.getElementById('id-unilabeltype-imageboard-imagesettings-number').innerHTML);\n            if (technicalnumber == imagenumber) {\n                imagesettingsdivvisibilitytoggler();\n            } else {\n                // Auf jeden fall anzeigen ... entweder war es schon scihtbar, dann nicht toggeln oder es war\n                // unsichtbar, dann anzeichen\n                imagesettingsdivvisibility('visible');\n            }\n        } else {\n            // No image was selected ... do nothing.\n        }\n    }\n\n    /**\n     *\n     * @param {string} visibility\n     */\n    function imagesettingsdivvisibility(visibility) {\n        let imagesettingsdiv = document.getElementById(\"id-unilabeltype-imageboard-imagesettings\");\n        imagesettingsdiv.style.visibility = visibility;\n    }\n\n    /**\n     *\n     */\n    function imagesettingsdivvisibilitytoggler() {\n        let imagesettingsdiv = document.getElementById(\"id-unilabeltype-imageboard-imagesettings\");\n        if (imagesettingsdiv && imagesettingsdiv.style && imagesettingsdiv.style.visibility == 'visible') {\n            imagesettingsdiv.style.visibility = 'hidden';\n        } else {\n            if (imagesettingsdiv && imagesettingsdiv.style && imagesettingsdiv.style.visibility == 'hidden') {\n                imagesettingsdiv.style.visibility = 'visible';\n            }\n        }\n\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All focusout-events will be handeled by oneListenerForAllInputFocusout.\n        mform.addEventListener(\"focusout\", focusoutExecute, false);\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"click\", onclickExecute, false);\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"contextmenu\", onRightclick, false);\n\n        // All uploadCompleted-events\n        // mform.addEventListener(eventTypes.uploadCompleted, machwas, false);\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // ToDo: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasx, {attributes: true, childList: true, subtree: true});\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasy, {attributes: true, childList: true, subtree: true});\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-canvas');\n\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // ToDo: Do wie need this code? Just to indicate changes during dev.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // Todo: check if this is needed. just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        }\n    }\n\n\n    /**\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    function renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let helpergrids = [];\n        for (let y = 0; y < canvasheight; y = y + ysteps) {\n            for (let x = 0; x < canvaswidth; x = x + xsteps) {\n                let helpergrid = {};\n                helpergrid.x = x;\n                helpergrid.y = y;\n                helpergrids.push(helpergrid);\n            }\n        }\n        // In preview only one helpergrid exists .... we use cmid = 0.\n        const context = {\n            // Data to be rendered\n            helpergrids: helpergrids,\n            gridcolor: gridcolor,\n            xsteps: xsteps,\n            ysteps: ysteps,\n            cmid: 0,\n            hidden: 0\n        };\n\n        Templates.renderForPromise('unilabeltype_imageboard/imageboard_helpergridpreview', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n            let combined = \"<div>\" + imageboardcontainer + \"</div>\" + html;\n            Templates.replaceNodeContents('#imageboardcontainer', combined, js);\n            // ToDo: Check.\n            return;\n        }).catch(() => {\n            log.debug('Rendering failed');\n        });\n    }\n\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * We need a timeout\n     */\n    function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // Todo: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already a div for this image.\n            const imageid = document.getElementById('unilabel-imageboard-imageid-' + number);\n            if (imageid === null) {\n                // Div does not exist so we need do add it do dom.\n                addImageToDom(number);\n                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?\n                // see also refreshImage ... there is already a timeout\n                setTimeout(function() {\n                    refreshImage(number);\n                }, 1000);\n            } else {\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {int} number\n     */\n    function addImageToDom(number) {\n        const imageid = document.getElementById('unilabel-imageboard-imageid-' + number);\n        if (imageid === null) {\n            renderAddedImage(number);\n            // This div does not exist so we need do add it do dom.\n            // Add an obverser to be able to update if image is uploaded.\n            let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n            if (imagefileNode) {\n                let observer = new MutationObserver(refreshImage);\n                observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n            }\n        } else {\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     *\n     * @param {number} number of\n     */\n    function renderAddedImage(number) {\n        const context = {\n            // Data to be rendered\n            number: number,\n            title: \"title\"\n        };\n\n        Templates.renderForPromise('unilabeltype_imageboard/previewimage', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n            let combined = \"<div>\" + imageboardcontainer + \"</div>\" + html;\n            Templates.replaceNodeContents('#imageboardcontainer', combined, js);\n            return;\n        }).catch(() => {\n            // No tiny editor present.\n        });\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refresh\n     * this image.\n     * @param {int} number\n     */\n    function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // ToDo: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById(\"unilabel-imageboard-imageid-\" + number);\n            // Fill all the needed values for imagedata.\n            let imagedata = getAllImagedataFromForm(number);\n            imageid.style.background = imagedata.titlebackgroundcolor;\n            imageid.src = imagedata.src;\n\n            if (imagedata.src === \"\") {\n                // Hide the image div.\n                imageid.classList.add(\"hidden\");\n            } else {\n                imageid.classList.remove(\"hidden\");\n                imageid.alt = imagedata.alt;\n            }\n\n            const imagediv = document.getElementById('unilabel-imageboard-element-' + number);\n            imagediv.style.left = parseInt(imagedata.xposition) + \"px\";\n            imagediv.style.top = parseInt(imagedata.yposition) + \"px\";\n\n            // Switch to the correct class eg \"unilable-imageboard-titlelineheight-4 if lineheight = 4.\n            const idelementtitle = document.getElementById('id_elementtitle-' + number);\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-0\");\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-1\");\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-2\");\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-3\");\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-4\");\n            idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-5\");\n            const dummy = \"unilable-imageboard-titlelineheight-\" + imagedata.titlelineheight;\n            idelementtitle.classList.add(dummy);\n\n            if (imagedata.targetwidth != 0) {\n                imageid.style.width = imagedata.targetwidth + \"px\";\n            } else {\n                imageid.style.width = \"auto\";\n            }\n            if (imagedata.targetheight != 0) {\n                imageid.style.height = imagedata.targetheight + \"px\";\n            } else {\n                imageid.style.height = \"auto\";\n            }\n            if (imagedata.title != \"\") {\n                imageid.title = (parseInt(number) + 1) + \": \" + imagedata.title;\n            } else {\n                imageid.title = (parseInt(number) + 1) + \": \";\n            }\n            if (imagedata.border != 0) {\n                imageid.style.border = imagedata.border + \"px solid\";\n                imageid.style.borderColor = imagedata.titlebackgroundcolor;\n            } else {\n                imageid.style.border = \"0\";\n            }\n            if (imagedata.borderradius != 0) {\n                imageid.style.borderRadius = imagedata.borderradius + \"px\";\n            } else {\n                imageid.style.borderRadius = \"0\";\n            }\n\n            // Title above image.\n            const elementtitle = document.getElementById('id_elementtitle-' + number);\n            elementtitle.innerHTML = imagedata.title;\n            elementtitle.style.color = imagedata.titlecolor;\n            elementtitle.style.backgroundColor = imagedata.titlebackgroundcolor;\n            elementtitle.style.fontSize = imagedata.fontsize + \"px\";\n            elementtitle.style.borderRadius = imagedata.borderradius + \"px\";\n        } else {\n            setTimeout(function() {\n                refreshAllImages();\n            }, 600);\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} technicalnumber of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(technicalnumber) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + technicalnumber,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            alt: 'id_unilabeltype_imageboard_alt_' + technicalnumber,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + technicalnumber,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + technicalnumber,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + technicalnumber,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + technicalnumber,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + technicalnumber,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + technicalnumber,\n            // A coordinates: \"unilabel-imageboard-coordinates-\" + technicalnumber,\n        };\n\n        let imagedata = {};\n        imagedata.technicalnumber = technicalnumber;\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.alt = document.getElementById(imageids.alt).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Get the src of the draftfile.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + technicalnumber + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n};\n"],"names":["canvaswidth","canvasheight","gridcolor","xsteps","ysteps","parseInt","mform","document","querySelectorAll","addEventListener","focusoutExecute","onclickExecute","onRightclick","backgroundfileNode","getElementById","MutationObserver","refreshBackgroundImage","observe","attributes","childList","subtree","canvasx","canvasy","registerAllEventlistener","setTimeout","refreshAllImages","helpergrids","y","x","helpergrid","push","context","cmid","hidden","renderForPromise","then","_ref","html","js","combined","innerHTML","replaceNodeContents","catch","debug","renderHelpergrid","gridtoggler","togglerText","querySelector","event","imagenumber","eventid","target","getAttribute","eventsourceimagesetting","split","eventsourceform","value","num","Number","isInteger","field","updateForm","writeFormdataOfImageToImagesettingsdialogupdate","substr","length","refreshImage","technicalnumber","selectedImage","getAllImagedataFromForm","title","xposition","yposition","border","borderradius","addImageToDom","imagesettingsdivvisibility","preventDefault","idoftarget","imagesettingsdiv","style","visibility","imagesettingsdivvisibilitytoggler","previewimage","getElementsByClassName","backgrounddiv","backgroundurl","includes","background","backgroundSize","backgroundImage","selectedOptions","width","height","singleElements","i","number","_ref2","renderAddedImage","imagefileNode","Array","isArray","imageid","imagedata","titlebackgroundcolor","src","classList","add","remove","alt","imagediv","left","top","idelementtitle","dummy","titlelineheight","targetwidth","targetheight","borderColor","borderRadius","elementtitle","color","titlecolor","backgroundColor","fontSize","fontsize","imageids","imagetag","getElementsByTagName","stopPropagation","contains","button","Str","get_string","done","text","innerText","showGrid","hideGrid"],"mappings":"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"}