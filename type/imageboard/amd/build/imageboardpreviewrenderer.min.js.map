{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\nimport log from 'core/log';\nimport cfg from 'core/config';\n\n/**\n * Initialize the imageboard renderer.\n *\n * @param {Integer} canvaswidth\n * @param {Integer} canvasheight\n * @param {String} gridcolor\n * @param {Integer} xsteps\n * @param {Integer} ysteps\n */\nexport const init = async(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) => {\n    canvaswidth = parseInt(canvaswidth, 10);\n    canvasheight = parseInt(canvasheight, 10);\n    xsteps = parseInt(xsteps, 10);\n    ysteps = parseInt(ysteps, 10);\n\n    let imageList = new Array();\n    let lastImageNumber = -1;\n\n    // The next calls depends on each other, so we wait for each of them to be ready.\n    await registerAllEventlistener();\n    await refreshBackgroundImage();\n    await refreshAllImages();\n    await renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n\n    // In preview only ONE helpergrid exists with number 0...\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-0\");\n    const togglerText = gridtoggler.querySelector('.unilabeltype-imageboard-toggle-text');\n    gridtoggler.addEventListener(\"click\", function(event) {\n        const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-0\");\n        event.stopPropagation();\n        event.preventDefault();\n        if (helpergrid.classList.contains(\"hidden\")) {\n            showGrid(togglerText, helpergrid);\n        } else {\n            hideGrid(togglerText, helpergrid);\n        }\n    });\n\n    const imageboarddraganddrop = await import('unilabeltype_imageboard/imageboarddraganddrop');\n    imageboarddraganddrop.init();\n\n    /**\n     * Helper function to show the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function showGrid(button, helpergrid) {\n        helpergrid.classList.remove(\"hidden\");\n        button.value = 'gridvisible';\n        Str.get_string('buttonlabelhelpergridhide', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * Helper function to remove the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function hideGrid(button, helpergrid) {\n        helpergrid.classList.add(\"hidden\");\n        button.value = 'gridhidden';\n        Str.get_string('buttonlabelhelpergridshow', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    async function onChangeAttribute(event) {\n        var number = getNumberFromEvent(event);\n        if (number >= 0) {\n            refreshImage(number);\n        } else {\n            // TODO: only refresh if titlecolor, titlebackgroundcolor, titlesize was changed.\n            await refreshAllImages();\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @returns {*}\n     */\n    function getNumberFromEvent(event) {\n        // If there is a focusout event from one of the following input fields then evaluate\n        // the number of the element that was changed.\n        let imageidselectors = [\n            'id_unilabeltype_imageboard_title_',\n            'id_unilabeltype_imageboard_alt_',\n            'id_unilabeltype_imageboard_xposition_',\n            'id_unilabeltype_imageboard_yposition_',\n            'id_unilabeltype_imageboard_targetwidth_',\n            'id_unilabeltype_imageboard_targetheight_',\n            'id_unilabeltype_imageboard_border_',\n            'id_unilabeltype_imageboard_borderradius_',\n        ];\n        const eventid = event.target.getAttribute('id');\n        for (let i = 0; i < imageidselectors.length; i++) {\n            if (eventid.includes(imageidselectors[i])) {\n                return eventid.split(imageidselectors[i])[1];\n            }\n        }\n        // If focus out was NOT from one of our inputfield then return a number less than zero.\n        return -1;\n    }\n\n    /**\n     * Add a new preview image when a new element is added.\n     */\n    function onAddElement() {\n        addImageToDom(parseInt(lastImageNumber) + 1);\n    }\n\n    /**\n     * Remove the preview image related to the element which was removed.\n     * The index of the element comes from the detail property of the event object.\n     * @param {*} event\n     */\n    function onRemoveElement(event) {\n        let removedImage = document.querySelector('#unilabel-imageboard-element-' + event.detail);\n        if (removedImage) {\n            removedImage.remove();\n        }\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    async function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All change events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"change\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // All keyup events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"keyup\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // If there is a new element added, the event \"itemadded\" is fired and we can add a new preview image.\n        mform.addEventListener(\"itemadded\", (event) => {\n            onAddElement(event);\n        });\n\n        // If there is an element removed, the event \"itemremoved\" is fired and we can remove the related preview image.\n        mform.addEventListener(\"itemremoved\", (event) => {\n            onRemoveElement(event);\n        });\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // TODO: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            canvasx.addEventListener('change', refreshBackgroundImage);\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            canvasy.addEventListener('change', refreshBackgroundImage);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    async function refreshBackgroundImage() {\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-canvas');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // TODO: Do wie need this code? Just to indicate changes during dev.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // TODO: If (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // TODO: check if this is needed. just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        }\n    }\n\n    /**\n     * Create the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n        let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n        let combined = \"<div>\" + imageboardcontainer + \"</div>\" + gridcontent.resultHtml;\n        Templates.replaceNodeContents('#imageboardcontainer', combined, gridcontent.resultJs);\n        // TODO: Check.\n        return;\n    }\n\n    /**\n     * Refresh the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridContainer = document.querySelector('#unilabeltype-imageboard-helpergrid-0');\n        if (gridContainer) {\n            let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n            let newGrid = createElementFromHTML(gridcontent.resultHtml);\n            gridContainer.replaceWith(newGrid);\n            Templates.runTemplateJS(gridcontent.resultJs);\n        } else {\n            log.debug('No grid found :(');\n        }\n    }\n\n    /**\n     * Create the helpergrid and returns the created html.\n     * @param {*} canvaswidth\n     * @param {*} canvasheight\n     * @param {*} gridcolor\n     * @param {*} xsteps\n     * @param {*} ysteps\n     * @returns {*} An object with the properties \"resultHtml\" and \"resultJs\".\n     */\n    async function getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let helpergrids = [];\n        for (let y = 0; y < canvasheight; y += ysteps) {\n            for (let x = 0; x < canvaswidth; x += xsteps) {\n                let helpergrid = {};\n                helpergrid.x = x;\n                helpergrid.y = y;\n                if (x + xsteps > canvaswidth) {\n                    helpergrid.xsteps = (x + xsteps) - canvaswidth;\n                }\n                if (y + ysteps > canvasheight) {\n                    helpergrid.ysteps = (y + ysteps) - canvasheight;\n                }\n                helpergrids.push(helpergrid);\n            }\n        }\n        // In preview only one helpergrid exists .... we use cmid = 0.\n        const context = {\n            // Data to be rendered\n            helpergrids: helpergrids,\n            gridcolor: gridcolor,\n            xsteps: xsteps,\n            ysteps: ysteps,\n            cmid: 0,\n            hidden: 0\n        };\n        var resultHtml = '';\n        var resultJs = '';\n        await Templates.renderForPromise('unilabeltype_imageboard/imageboard_helpergridpreview', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Rendering failed');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * This function is designed as async function, so we can wait till all depending actions are ready.\n     */\n    async function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // TODO: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already the elment for the image with number xyz.\n            if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n                // Add the new image and wait till it is rendered.\n                await addImageToDom(number);\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            } else {\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {Integer} number\n     */\n    async function addImageToDom(number) {\n        // If there is an invalid number, we do nothing.\n        if (number < 0) {\n            return;\n        }\n\n        // Check whether the image has to be created.\n        if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n            // Get the rendered html for the new preview image.\n            let result = await renderAddedImage(number);\n            if (result.resultHtml) {\n                // Place the new rendered image at the end of the div all preview images are in.\n                document.querySelector('#imageboardcontainer div').insertAdjacentHTML('beforeend', result.resultHtml);\n                // Run the JS for the new image. This actually does nothing but sometime it will.\n                Templates.runTemplateJS(result.resultJs);\n\n                // Add the mutation listener for the filepicker element related to the new image.\n                let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n                if (imagefileNode) {\n                    let observer = new MutationObserver(refreshImage);\n                    observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n                }\n            }\n        } else {\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     *\n     * @param {number} number of\n     */\n    async function renderAddedImage(number) {\n        if (imageList.includes(number)) {\n            return {};\n        }\n        lastImageNumber = number;\n        imageList.push(lastImageNumber);\n        const context = {\n            // Data to be rendered\n            number: number,\n            displaynumber: parseInt(number) + 1,\n            title: \"title\",\n            wwwroot: cfg.wwwroot\n        };\n\n        let resultHtml;\n        let resultJs;\n        await Templates.renderForPromise('unilabeltype_imageboard/previewimage', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Error while rendering from template');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refresh\n     * this image.\n     * @param {Integer} number\n     */\n    async function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // TODO: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById(\"unilabel-imageboard-imageid-\" + number);\n            if (imageid) {\n                // Fill all the needed values for imagedata.\n                let imagedata = getAllImagedataFromForm(number);\n                imageid.style.background = imagedata.titlebackgroundcolor;\n                imageid.src = imagedata.src;\n\n                if (imagedata.src === \"\") {\n                    // Hide the image div.\n                    imageid.classList.add(\"hidden\");\n                } else {\n                    imageid.classList.remove(\"hidden\");\n                    imageid.alt = imagedata.alt;\n                }\n\n                const imagediv = document.getElementById('unilabel-imageboard-element-' + number);\n                imagediv.style.left = parseInt(imagedata.xposition) + \"px\";\n                imagediv.style.top = parseInt(imagedata.yposition) + \"px\";\n\n                // Switch to the correct class eg \"unilable-imageboard-titlelineheight-4 if lineheight = 4.\n                const idelementtitle = document.getElementById('id_elementtitle-' + number);\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-0\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-1\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-2\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-3\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-4\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-5\");\n                const dummy = \"unilable-imageboard-titlelineheight-\" + imagedata.titlelineheight;\n                idelementtitle.classList.add(dummy);\n\n                if (imagedata.targetwidth != 0) {\n                    imageid.style.width = imagedata.targetwidth + \"px\";\n                } else {\n                    imageid.style.width = \"auto\";\n                }\n                if (imagedata.targetheight != 0) {\n                    imageid.style.height = imagedata.targetheight + \"px\";\n                } else {\n                    imageid.style.height = \"auto\";\n                }\n                if (imagedata.title != \"\") {\n                    imageid.title = (parseInt(number) + 1) + \": \" + imagedata.title;\n                } else {\n                    imageid.title = (parseInt(number) + 1) + \": \";\n                }\n                if (imagedata.border != 0) {\n                    imageid.style.border = imagedata.border + \"px solid\";\n                    imageid.style.borderColor = imagedata.titlebackgroundcolor;\n                } else {\n                    imageid.style.border = \"0\";\n                }\n                if (imagedata.borderradius != 0) {\n                    imageid.style.borderRadius = imagedata.borderradius + \"px\";\n                } else {\n                    imageid.style.borderRadius = \"0\";\n                }\n\n                // Title above image.\n                const elementtitle = document.getElementById('id_elementtitle-' + number);\n                elementtitle.innerHTML = imagedata.title;\n                elementtitle.style.color = imagedata.titlecolor;\n                elementtitle.style.backgroundColor = imagedata.titlebackgroundcolor;\n                elementtitle.style.fontSize = imagedata.fontsize + \"px\";\n                elementtitle.style.borderRadius = imagedata.borderradius + \"px\";\n            }\n        } else {\n            // Because the next call is a async call we have to wait till it is ready.\n            await refreshAllImages();\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {Integer} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            alt: 'id_unilabeltype_imageboard_alt_' + number,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n            coordinates: \"unilabel-imageboard-coordinates-\" + number,\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.alt = document.getElementById(imageids.alt).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Get the src of the draftfile.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        let div = document.getElementById(imageids.coordinates);\n        if (div) {\n            if (imagedata.xposition === \"\") {\n                // If an element was added the coordinates are empty ...\n                imagedata.xposition = 0;\n            }\n            if (imagedata.yposition === \"\") {\n                imagedata.yposition = 0;\n            }\n            div.innerHTML = (parseInt(number) + 1) + \": \" + imagedata.xposition + \" / \" + imagedata.yposition;\n        }\n        return imagedata;\n    }\n\n    /**\n     * This is a helper function to create an html element which can be used to replace another element.\n     *\n     * @param {Sring} htmlString\n     * @returns {Element}\n     */\n    function createElementFromHTML(htmlString) {\n        var div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n\n        // Change this to div.childNodes to support multiple top-level nodes.\n        return div.firstChild;\n    }\n};\n"],"names":["async","canvaswidth","canvasheight","gridcolor","xsteps","ysteps","parseInt","imageList","Array","lastImageNumber","mform","document","querySelectorAll","addEventListener","onChangeAttribute","event","addImageToDom","removedImage","querySelector","detail","remove","onRemoveElement","backgroundfileNode","getElementById","MutationObserver","refreshBackgroundImage","observe","attributes","childList","subtree","canvasx","canvasy","registerAllEventlistener","refreshAllImages","gridcontent","getHelpergrid","combined","innerHTML","resultHtml","replaceNodeContents","resultJs","renderHelpergrid","gridtoggler","togglerText","helpergrid","stopPropagation","preventDefault","classList","contains","button","value","Str","get_string","done","text","innerText","showGrid","add","hideGrid","number","imageidselectors","eventid","target","getAttribute","i","length","includes","split","getNumberFromEvent","refreshImage","previewimage","getElementsByClassName","backgrounddiv","backgroundurl","style","background","backgroundSize","backgroundImage","selectedOptions","width","height","refreshHelpergrid","gridContainer","newGrid","htmlString","div","createElement","trim","firstChild","replaceWith","runTemplateJS","debug","helpergrids","y","x","push","context","cmid","hidden","Templates","renderForPromise","then","_ref","html","js","catch","singleElements","result","displaynumber","title","wwwroot","cfg","_ref2","renderAddedImage","insertAdjacentHTML","imagefileNode","isArray","imageid","imagedata","imageids","titlecolor","titlebackgroundcolor","titlelineheight","fontsize","alt","xposition","yposition","targetwidth","targetheight","src","border","borderradius","coordinates","imagetag","getElementsByTagName","getAllImagedataFromForm","imagediv","left","top","idelementtitle","dummy","borderColor","borderRadius","elementtitle","color","backgroundColor","fontSize","init"],"mappings":"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"}