{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\nimport log from 'core/log';\nimport cfg from 'core/config';\n\n/**\n * Initialize the imageboard renderer.\n *\n * @param {Integer} canvaswidth\n * @param {Integer} canvasheight\n * @param {String} gridcolor\n * @param {Integer} xsteps\n * @param {Integer} ysteps\n */\nexport const init = async(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) => {\n    canvaswidth = parseInt(canvaswidth, 10);\n    canvasheight = parseInt(canvasheight, 10);\n    xsteps = parseInt(xsteps, 10);\n    ysteps = parseInt(ysteps, 10);\n\n    let emptyPictureSrc = cfg.wwwroot + '/mod/unilabel/type/imageboard/pix/empty-picture.gif';\n\n    let imageList = new Array();\n    let lastImageNumber = -1;\n\n    // The next calls depends on each other, so we wait for each of them to be ready.\n    await registerAllEventlistener();\n    await refreshBackgroundImage();\n    await refreshAllImages();\n    await renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n\n    // In preview only ONE helpergrid exists with number 0...\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-0\");\n    const togglerText = gridtoggler.querySelector('.unilabeltype-imageboard-toggle-text');\n    gridtoggler.addEventListener(\"click\", function(event) {\n        const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-0\");\n        event.stopPropagation();\n        event.preventDefault();\n        if (helpergrid.classList.contains(\"hidden\")) {\n            showGrid(togglerText, helpergrid);\n        } else {\n            hideGrid(togglerText, helpergrid);\n        }\n    });\n\n    const imageboarddraganddrop = await import('unilabeltype_imageboard/imageboarddraganddrop');\n    imageboarddraganddrop.init();\n\n    /**\n     * Helper function to show the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function showGrid(button, helpergrid) {\n        helpergrid.classList.remove(\"hidden\");\n        button.value = 'gridvisible';\n        Str.get_string('buttonlabelhelpergridhide', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * Helper function to remove the grid from imageboard.\n     *\n     * @param {object} button\n     * @param {object} helpergrid\n     */\n    function hideGrid(button, helpergrid) {\n        helpergrid.classList.add(\"hidden\");\n        button.value = 'gridhidden';\n        Str.get_string('buttonlabelhelpergridshow', 'unilabeltype_imageboard').done(function(text) {\n            button.innerText = text;\n        });\n    }\n\n    /**\n     * This function handles all focus out events if the event is from on of our input fields.\n     * @param {event} event\n     */\n    async function onChangeAttribute(event) {\n        let technicalnumber = -1;\n        // 1. Check where the focus out event was created form input or imagesetting input.\n        const eventid = event.target.getAttribute('id');\n        let eventsourceimagesetting = eventid.split(\"id-unilabeltype-imageboard-imagesettings-dialog-\")[1];\n        let eventsourceform = eventid.split(\"id_unilabeltype_imageboard_\")[1];\n        // ToDo:  Check if it is a focus out event has to be more precise ... Delete-Icon!!!!\n        if (typeof eventsourceimagesetting !== \"undefined\" || typeof eventsourceform !== \"undefined\") {\n\n            // 2. If ID starts with id_unilabeltype_imageboard_ then focus out came from form input fields.\n            if (typeof eventsourceimagesetting !== \"undefined\" && eventsourceimagesetting !== '') {\n                // Call updateForm and use as parameter the input field that should be updated in the form.\n                technicalnumber = updateForm(eventsourceimagesetting);\n            }\n\n            // 3. ID starts with id_unilabeltype_imageboard_. Focus from the form The imagesettings must be updated.\n            if (typeof eventsourceform !== \"undefined\" && eventsourceform !== '') {\n                // We have to update all field in imagesettingsdialog\n                // Aus dem event nun doch die nummer auslesen\n                technicalnumber = eventsourceform.substr(eventsourceform.length - 1, eventsourceform.length);\n                writeFormdataOfImageToImagesettingsdialogupdate(technicalnumber);\n            }\n\n            // Now we know which image was changed and we can refresh on or all images.\n            if (technicalnumber >= 0) {\n                refreshImage(technicalnumber);\n            // } else {\n            //     // TODO: only refresh if titlecolor, titlebackgroundcolor, titlesize was changed.\n            //     await refreshAllImages();\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onRightclick(event) {\n        event.preventDefault();\n        // Get the number of the image that was selected with the right mouse button\n        var idoftarget = event.target.getAttribute('id');\n        if (!idoftarget) {\n            return;\n        }\n\n        // Check, if idoftarget ist an id of an image\n        let technicalnumber = idoftarget.split('unilabel-imageboard-imageid-')[1];\n        // Oder ein Titel wurde angeklickt\n        if (!technicalnumber) {\n            technicalnumber = idoftarget.split('id_elementtitle-')[1];\n        }\n        if (technicalnumber) {\n            // Add class selected to the selected image\n            marktargetasselected(event.target);\n            // Update the imagesettingsdialog with the data of that image and show the dialog\n            writeFormdataOfImageToImagesettingsdialogupdate(technicalnumber);\n            // Wenn das selectierte Bild eine andere nummer hat als das aktuelle imagesettings anzeigt dann auf jeden fall anzeigen\n            const imagenumber =\n                parseInt(document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-number').innerHTML);\n            if (technicalnumber == imagenumber) {\n                imagesettingsdivvisibilitytoggler();\n            } else {\n                // Imagesettingsdialog has do be visible. So if it is already visible it is no problem to set it\n                // once again visible. If it is hidden, the set it to visible.\n                imagesettingsdivvisibility('visible');\n            }\n        } else {\n            // No image was selected ... do nothing.\n        }\n    }\n\n    /**\n     *\n     * @param {target} target\n     */\n    function marktargetasselected(target) {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // TODO: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            let dummy = document.getElementById('unilabel-imageboard-imageid-' + number);\n            dummy.classList.remove(\"selected\");\n            dummy = document.getElementById('id_elementtitle-' + number);\n            dummy.classList.remove(\"selected\");\n\n        }\n        target.classList.add(\"selected\");\n    }\n\n    /**\n     *\n     */\n    function imagesettingsdivvisibilitytoggler() {\n        let imagesettingsdiv = document.getElementById(\"id-unilabeltype-imageboard-imagesettings-dialog\");\n        if (imagesettingsdiv && imagesettingsdiv.style && imagesettingsdiv.style.visibility == 'visible') {\n            imagesettingsdiv.style.visibility = 'hidden';\n        } else {\n            if (imagesettingsdiv && imagesettingsdiv.style && imagesettingsdiv.style.visibility == 'hidden') {\n                imagesettingsdiv.style.visibility = 'visible';\n            }\n        }\n    }\n\n    /**\n     * Upates the input field in the mform\n     *\n     * @param {string} eventsourceimagesetting\n     * @returns {number}\n     */\n    function updateForm(eventsourceimagesetting) {\n        const technicalnumber =\n            parseInt(document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-number').innerHTML) - 1;\n        // Only do something if the changed value is an integer.\n        // ToDo: Also add check all other input fields.\n        let value =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-' + eventsourceimagesetting).value;\n        if (eventsourceimagesetting === 'xposition' ||\n            eventsourceimagesetting === 'yposition' ||\n            eventsourceimagesetting === 'border' ||\n            eventsourceimagesetting === 'borderradius') {\n            let num = Number(value);\n            if (value !== '' && !Number.isInteger(num)) {\n                return -1;\n            }\n        }\n\n        let field = document.getElementById('id_unilabeltype_imageboard_' + eventsourceimagesetting + '_' + technicalnumber);\n        if (field !== null) {\n            field.value = value;\n        }\n        return technicalnumber;\n    }\n\n    /**\n     *\n     * @param {number} technicalnumber\n     */\n    function writeFormdataOfImageToImagesettingsdialogupdate(technicalnumber) {\n        let selectedImage = getAllImagedataFromForm(technicalnumber);\n        // Den Imagesettings-Anzeigebereich aktualisieren\n        const imagesettingsNumber = document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-number');\n        imagesettingsNumber.innerHTML = (parseInt(selectedImage.technicalnumber) + 1);\n\n        const imagesettingsTitle = document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-title');\n        imagesettingsTitle.value = selectedImage.title;\n\n        const imagesettingsInputPositionX =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-xposition');\n        imagesettingsInputPositionX.value = parseInt(selectedImage.xposition);\n        const imagesettingsInputPositionY =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-yposition');\n        imagesettingsInputPositionY.value = parseInt(selectedImage.yposition);\n\n        const imagesettingsInputTargetwidth =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-targetwidth');\n        imagesettingsInputTargetwidth.value = parseInt(selectedImage.targetwidth);\n        const imagesettingsInputTargetheight =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-targetheight');\n        imagesettingsInputTargetheight.value = parseInt(selectedImage.targetheight);\n\n        const imagesettingsInputBorder = document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-border');\n        imagesettingsInputBorder.value = parseInt(selectedImage.border);\n\n        const imagesettingsInputBorderradius =\n            document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-borderradius');\n        imagesettingsInputBorderradius.value = parseInt(selectedImage.borderradius);\n\n        const imagesettingsUrl = document.getElementById('id-unilabeltype-imageboard-imagesettings-dialog-url');\n        imagesettingsUrl.value = selectedImage.url;\n    }\n\n\n    /**\n     * Add a new preview image when a new element is added.\n     */\n    function onAddElement() {\n        addImageToDom(parseInt(lastImageNumber) + 1);\n    }\n\n    /**\n     * Remove the preview image related to the element which was removed.\n     * The index of the element comes from the detail property of the event object.\n     * @param {*} event\n     */\n    function onRemoveElement(event) {\n        let removedImage = document.querySelector('#unilabel-imageboard-element-' + event.detail);\n        if (removedImage) {\n            removedImage.remove();\n        }\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    async function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All change events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"change\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // All keyup events will be handeled by the onChangeAttribute function.\n        mform.addEventListener(\"keyup\", async(event) => {\n            await onChangeAttribute(event);\n        });\n\n        // If there is a new element added, the event \"itemadded\" is fired and we can add a new preview image.\n        mform.addEventListener(\"itemadded\", (event) => {\n            onAddElement(event);\n        });\n\n        // If there is an element removed, the event \"itemremoved\" is fired and we can remove the related preview image.\n        mform.addEventListener(\"itemremoved\", (event) => {\n            onRemoveElement(event);\n        });\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"click\", onclickExecute, false);\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"contextmenu\", onRightclick, false);\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // TODO: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        require(['core_form/events'], function(FormEvent) {\n            backgroundfileNode.addEventListener(FormEvent.eventTypes.uploadChanged, (event) => {\n                // In the event object the target is the filemanager we want to access.\n                const filemanager = event.target;\n                const interval = setInterval(async() => {\n                    // As long the filemanager is updating, e.g. while uploading large images, we have to wait.\n                    if (!filemanager.classList.contains('fm-updating')) {\n                        clearInterval(interval);\n                        // If the filemanager does not have any items we can reset our preview image.\n                        if (filemanager.classList.contains('fm-noitems')) {\n                            // The filemanager caches the last loaded image, so we would not realy know\n                            // if it is deleted. To make sure we know later too, we remove that cached image.\n                            let img = event.target.getElementsByTagName('img')[0];\n                            img.remove();\n                            // Now reset the preview image.\n                            refreshBackgroundImage();\n                        }\n                    }\n                }, 100);\n            });\n        });\n\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            canvasx.addEventListener('change', refreshBackgroundImage);\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            canvasy.addEventListener('change', refreshBackgroundImage);\n        }\n    }\n\n\n    /**\n     * OnClickEvent is needed for the close-Button of imagesettings.\n     * @param {event} event\n     */\n    function onclickExecute(event) {\n        var targetid = event.target.getAttribute('id');\n        var mform = targetid.split('button-mform1')[1];\n        if (mform) {\n            // Das wird über den event itemadded bereits abgearbeitet ...\n        } else {\n            // Wenn kein Element hinzugefügt wird prüfen, ob man den Imagesettingsdialog ausblenden will.\n            var imagesettindgdialogid = event.target.getAttribute('id');\n            if (imagesettindgdialogid === 'id-unilabeltype-imageboard-imagesettings-dialog-close') {\n                imagesettingsdivvisibility('hidden');\n            }\n        }\n    }\n    /**\n     *\n     * @param {string} visibility\n     */\n    function imagesettingsdivvisibility(visibility) {\n        let imagesettingsdiv = document.getElementById(\"id-unilabeltype-imageboard-imagesettings-dialog\");\n        imagesettingsdiv.style.visibility = visibility;\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    async function refreshBackgroundImage() {\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-canvas');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // TODO: Do wie need this code? Just to indicate changes during dev.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // TODO: If (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // TODO: check if this is needed. just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n            await refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        }\n        log.debug('canvas size changed');\n        const myevent = new CustomEvent('canvaschanged');\n        document.dispatchEvent(myevent);\n    }\n\n    /**\n     * Create the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function renderHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n        // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n        let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n        let combined = \"<div>\" + imageboardcontainer + \"</div>\" + gridcontent.resultHtml;\n        Templates.replaceNodeContents('#imageboardcontainer', combined, gridcontent.resultJs);\n        // TODO: Check.\n        return;\n    }\n\n    /**\n     * Refresh the helper grid as async function so we can wait till it is ready.\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     * @param {string} gridcolor\n     * @param {number} xsteps\n     * @param {number} ysteps\n     */\n    async function refreshHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let gridContainer = document.querySelector('#unilabeltype-imageboard-helpergrid-0');\n        if (gridContainer) {\n            let gridcontent = await getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps);\n            let newGrid = createElementFromHTML(gridcontent.resultHtml);\n            gridContainer.replaceWith(newGrid);\n            Templates.runTemplateJS(gridcontent.resultJs);\n        } else {\n            log.debug('No grid found :(');\n        }\n    }\n\n    /**\n     * Create the helpergrid and returns the created html.\n     * @param {*} canvaswidth\n     * @param {*} canvasheight\n     * @param {*} gridcolor\n     * @param {*} xsteps\n     * @param {*} ysteps\n     * @returns {*} An object with the properties \"resultHtml\" and \"resultJs\".\n     */\n    async function getHelpergrid(canvaswidth, canvasheight, gridcolor, xsteps, ysteps) {\n        let helpergrids = [];\n        for (let y = 0; y < canvasheight; y += ysteps) {\n            for (let x = 0; x < canvaswidth; x += xsteps) {\n                let helpergrid = {};\n                helpergrid.x = x;\n                helpergrid.y = y;\n                if (x + xsteps > canvaswidth) {\n                    helpergrid.xsteps = (x + xsteps) - canvaswidth;\n                }\n                if (y + ysteps > canvasheight) {\n                    helpergrid.ysteps = (y + ysteps) - canvasheight;\n                }\n                helpergrids.push(helpergrid);\n            }\n        }\n        // In preview only one helpergrid exists .... we use cmid = 0.\n        const context = {\n            // Data to be rendered\n            helpergrids: helpergrids,\n            gridcolor: gridcolor,\n            xsteps: xsteps,\n            ysteps: ysteps,\n            cmid: 0,\n            hidden: 0\n        };\n        var resultHtml = '';\n        var resultJs = '';\n        await Templates.renderForPromise('unilabeltype_imageboard/imageboard_helpergridpreview', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Rendering failed');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * This function is designed as async function, so we can wait till all depending actions are ready.\n     */\n    async function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // TODO: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already the elment for the image with number xyz.\n            if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n                // Add the new image and wait till it is rendered.\n                await addImageToDom(number);\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            } else {\n                // Refresh the presentation of the image.\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {Integer} number\n     */\n    async function addImageToDom(number) {\n        // If there is an invalid number, we do nothing.\n        if (number < 0) {\n            return;\n        }\n\n        // Check whether the image has to be created.\n        if (!document.getElementById('unilabel-imageboard-element-' + number)) {\n            // Get the rendered html for the new preview image.\n            let result = await renderAddedImage(number);\n            if (result.resultHtml) {\n                // Place the new rendered image at the end of the div all preview images are in.\n                document.querySelector('#imageboardcontainer div').insertAdjacentHTML('beforeend', result.resultHtml);\n                // Run the JS for the new image. This actually does nothing but sometime it will.\n                Templates.runTemplateJS(result.resultJs);\n\n\n                // Add listeners to the filemanager.\n                let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n                if (imagefileNode) {\n                    // Add the listener to watch changes in the filemanager.\n                    // We use this to be aware of deleted images.\n                    // From core_form/events come the event types. We use the event type \"uploadChanged\".\n                    require(['core_form/events'], function(FormEvent) {\n                        imagefileNode.addEventListener(FormEvent.eventTypes.uploadChanged, (event) => {\n                            // In the event object the target is the filemanager we want to access.\n                            const filemanager = event.target;\n                            const interval = setInterval(async() => {\n                                // As long the filemanager is updating, e.g. while uploading large images, we have to wait.\n                                if (!filemanager.classList.contains('fm-updating')) {\n                                    clearInterval(interval);\n                                    // If the filemanager does not have any items we can reset our preview image.\n                                    if (filemanager.classList.contains('fm-noitems')) {\n                                        // The filemanager caches the last loaded image, so we would not realy know\n                                        // if it is deleted. To make sure we know later too, we remove that cached image.\n                                        let img = event.target.getElementsByTagName('img')[0];\n                                        img.remove();\n                                        // Now reset the preview image.\n                                        resetPreviewImage(number);\n                                    }\n                                }\n                            }, 100);\n                        });\n                    });\n\n                    // Add the mutation listener for the filepicker element related to the new image.\n                    let observer = new MutationObserver(async() => {\n                        await addImageToDom(number);\n                        // Refresh the presentation of the image.\n                        refreshImage(number);\n                    });\n                    observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n                }\n            }\n        } else {\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     * Reset the preview image if the image is deleted but the element is still there.\n     * @param {Integer} number\n     */\n    function resetPreviewImage(number) {\n        let prevImg = document.querySelector('#unilabel-imageboard-imageid-' + number);\n        prevImg.setAttribute('src', emptyPictureSrc);\n        prevImg.style.background = 'none';\n        prevImg.style.height = 'auto';\n        prevImg.style.width = 'auto';\n        prevImg.style.border = 'none';\n        prevImg.style.borderRadius = 0;\n        log.debug('Image nr ' + number + ' removed');\n        document.getElementById('id_unilabeltype_imageboard_targetwidth_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_targetheight_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_border_' + number).value = 0;\n        document.getElementById('id_unilabeltype_imageboard_borderradius_' + number).value = 0;\n    }\n\n    /**\n     *\n     * @param {number} number of\n     */\n    async function renderAddedImage(number) {\n        if (imageList.includes(number)) {\n            return {};\n        }\n        lastImageNumber = number;\n        imageList.push(lastImageNumber);\n        const context = {\n            // Data to be rendered\n            number: number,\n            displaynumber: parseInt(number) + 1,\n            title: \"title\",\n            src: emptyPictureSrc\n        };\n\n        let resultHtml;\n        let resultJs;\n        await Templates.renderForPromise('unilabeltype_imageboard/previewimage', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            resultHtml = html;\n            resultJs = js;\n            return;\n        }).catch(() => {\n            log.debug('Error while rendering from template');\n        });\n\n        return {\n            resultHtml: resultHtml,\n            resultJs: resultJs\n        };\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refresh\n     * this image.\n     * @param {Integer} number\n     */\n    async function refreshImage(number) {\n        // Only refresh a real image with a positive number.\n        if (number >= 0) {\n            let imageid = document.getElementById(\"unilabel-imageboard-imageid-\" + number);\n            if (imageid) {\n                // Fill all the needed values for imagedata.\n                let imagedata = getAllImagedataFromForm(number);\n                // A imageid.style.background = imagedata.titlebackgroundcolor;\n                imageid.src = imagedata.src;\n\n                if (imagedata.src === \"\") {\n                    // Hide the image div.\n                    imageid.classList.add(\"hidden\");\n                } else {\n                    imageid.classList.remove(\"hidden\");\n                    imageid.alt = imagedata.alt;\n                }\n\n                const imagediv = document.getElementById('unilabel-imageboard-element-' + number);\n                imagediv.style.left = parseInt(imagedata.xposition) + \"px\";\n                imagediv.style.top = parseInt(imagedata.yposition) + \"px\";\n\n                // Switch to the correct class eg \"unilable-imageboard-titlelineheight-4 if lineheight = 4.\n                const idelementtitle = document.getElementById('id_elementtitle-' + number);\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-0\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-1\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-2\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-3\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-4\");\n                idelementtitle.classList.remove(\"unilable-imageboard-titlelineheight-5\");\n                const dummy = \"unilable-imageboard-titlelineheight-\" + imagedata.titlelineheight;\n                idelementtitle.classList.add(dummy);\n\n                if (imagedata.targetwidth != 0) {\n                    imageid.style.width = imagedata.targetwidth + \"px\";\n                } else {\n                    imageid.style.width = \"auto\";\n                }\n                if (imagedata.targetheight != 0) {\n                    imageid.style.height = imagedata.targetheight + \"px\";\n                } else {\n                    imageid.style.height = \"auto\";\n                }\n                if (imagedata.title != \"\") {\n                    imageid.title = (parseInt(number) + 1) + \": \" + imagedata.title;\n                } else {\n                    imageid.title = (parseInt(number) + 1) + \": \";\n                }\n                if (imagedata.border != 0) {\n                    imageid.style.border = imagedata.border + \"px solid\";\n                    imageid.style.borderColor = imagedata.titlebackgroundcolor;\n                } else {\n                    imageid.style.border = \"0\";\n                }\n                if (imagedata.borderradius != 0) {\n                    imageid.style.borderRadius = imagedata.borderradius + \"px\";\n                } else {\n                    imageid.style.borderRadius = \"0\";\n                }\n\n                // Title above image.\n                const elementtitle = document.getElementById('id_elementtitle-' + number);\n                elementtitle.innerHTML = imagedata.title;\n                elementtitle.style.color = imagedata.titlecolor;\n                elementtitle.style.backgroundColor = imagedata.titlebackgroundcolor;\n                elementtitle.style.fontSize = imagedata.fontsize + \"px\";\n                elementtitle.style.borderRadius = imagedata.borderradius + \"px\";\n            }\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {Integer} technicalnumber of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(technicalnumber) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + technicalnumber,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            url: 'id_unilabeltype_imageboard_url_' + technicalnumber,\n            alt: 'id_unilabeltype_imageboard_alt_' + technicalnumber,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + technicalnumber,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + technicalnumber,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + technicalnumber,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + technicalnumber,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + technicalnumber,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + technicalnumber,\n        };\n\n        let imagedata = {};\n        imagedata.technicalnumber = technicalnumber;\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.url = document.getElementById(imageids.url).value;\n        imagedata.alt = document.getElementById(imageids.alt).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Get the src of the draftfile.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + technicalnumber + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = emptyPictureSrc;\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n\n    /**\n     * This is a helper function to create an html element which can be used to replace another element.\n     *\n     * @param {Sring} htmlString\n     * @returns {Element}\n     */\n    function createElementFromHTML(htmlString) {\n        var div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n\n        // Change this to div.childNodes to support multiple top-level nodes.\n        return div.firstChild;\n    }\n};\n"],"names":["async","canvaswidth","canvasheight","gridcolor","xsteps","ysteps","parseInt","emptyPictureSrc","cfg","wwwroot","imageList","Array","lastImageNumber","mform","document","querySelectorAll","addEventListener","onChangeAttribute","event","addImageToDom","removedImage","querySelector","detail","remove","onRemoveElement","onclickExecute","onRightclick","backgroundfileNode","getElementById","require","FormEvent","eventTypes","uploadChanged","filemanager","target","interval","setInterval","classList","contains","clearInterval","getElementsByTagName","refreshBackgroundImage","MutationObserver","observe","attributes","childList","subtree","canvasx","canvasy","registerAllEventlistener","singleElements","i","length","number","getAttribute","split","refreshImage","refreshAllImages","gridcontent","getHelpergrid","combined","innerHTML","resultHtml","replaceNodeContents","resultJs","renderHelpergrid","gridtoggler","togglerText","helpergrid","stopPropagation","preventDefault","button","value","Str","get_string","done","text","innerText","showGrid","add","hideGrid","technicalnumber","eventid","eventsourceimagesetting","eventsourceform","num","Number","isInteger","field","updateForm","substr","writeFormdataOfImageToImagesettingsdialogupdate","idoftarget","dummy","marktargetasselected","imagesettingsdiv","style","visibility","imagesettingsdivvisibilitytoggler","imagesettingsdivvisibility","selectedImage","getAllImagedataFromForm","title","xposition","yposition","targetwidth","targetheight","border","borderradius","url","previewimage","getElementsByClassName","backgrounddiv","backgroundurl","includes","background","backgroundSize","backgroundImage","selectedOptions","width","height","refreshHelpergrid","debug","myevent","CustomEvent","dispatchEvent","gridContainer","newGrid","htmlString","div","createElement","trim","firstChild","replaceWith","runTemplateJS","helpergrids","y","x","push","context","cmid","hidden","Templates","renderForPromise","then","_ref","html","js","catch","result","displaynumber","src","_ref2","renderAddedImage","insertAdjacentHTML","imagefileNode","prevImg","setAttribute","borderRadius","resetPreviewImage","imageid","imagedata","alt","imagediv","left","top","idelementtitle","titlelineheight","borderColor","titlebackgroundcolor","elementtitle","color","titlecolor","backgroundColor","fontSize","fontsize","imageids","imagetag","init"],"mappings":"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"}