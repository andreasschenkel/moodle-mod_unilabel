{"version":3,"file":"imageboarddraganddrop.min.js","sources":["../src/imageboarddraganddrop.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import log from 'core/log';\n\nexport const init = () => {\n    // Create an array selectedImage to be able to store some data about the selected image that is moved.\n    let selectedImage = {};\n    selectedImage.number = null;\n    selectedImage.number = null;\n    selectedImage.src = '';\n    // ItemToMove is the div that the selected image is inside AND the title. We do NOT move the image we move the itemtomove-div.\n    selectedImage.itemToMove = null;\n    // ToDo: Add documentation about xoffset?\n    selectedImage.eventlayerX = 0;\n    selectedImage.eventlayerY = 0;\n    selectedImage.width = null;\n    selectedImage.height = null;\n    selectedImage.titlecorrectorX = 0;\n    selectedImage.titlecorrectorY = 0;\n\n    // Store the data about the canvas/background.\n    let canvas = null;\n    let canvaswidth = 600;\n    let canvasheight = 400;\n\n    registerDnDListener();\n\n    /**\n     *  We need two event listeners for drag and drop. One when the dragging starts and one when it ends.\n     */\n    function registerDnDListener() {\n        canvas = document.getElementById(\"unilabel-imageboard-background-canvas\");\n        canvaswidth = canvas.clientWidth;\n        canvasheight = canvas.clientHeight;\n        canvas.addEventListener(\"dragstart\", dragStart, false);\n        canvas.addEventListener(\"dragend\", dragEnd, false);\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragStart(event) {\n        // Check if title or image is selected because this leads to different offsets.\n        // We have to do different calculation of x and y position.\n        let selectedType = \"nix\";\n        if (event &&\n            event.explicitOriginalTarget &&\n            event.explicitOriginalTarget.classList &&\n            event.explicitOriginalTarget.classList.contains('unilabel-imageboard-image')) {\n            selectedType = \"image\";\n        } else {\n            selectedType = \"title\";\n        }\n        // ToDo: Check this condition ....  shouldnt it check         selectedType = \"image\"\n        if (event && event.target && event.target.classList.contains('unilabel-imageboard-element-draggable')) {\n            // Image was selected, so we have to store the information about this image.\n            // 1. Get the number of the selected element.\n            let number = event.target.getAttribute('id').split('unilabel-imageboard-element-')[1];\n            // 2. Get imagedata of the selected element.\n            let imagedata = getAllImagedataFromForm(number);\n            // 3. Set the number of the selected image so this image can be updated when dragEnds.\n            selectedImage.number = number;\n            // 4. Collect the other information.\n            selectedImage.title = imagedata.title;\n            selectedImage.titlelineheight = imagedata.titlelineheight;\n            selectedImage.fontsize = imagedata.fontsize;\n            selectedImage.width = imagedata.targetwidth;\n            selectedImage.height = imagedata.targetheight;\n            selectedImage.itemToMove = document.getElementById('unilabel-imageboard-element-' + selectedImage.number);\n            // Attention: layerX and layerY is the relative position of the mouseposition inside div.\n            // So div is the image or the title and the layer depends on this according to the complete element.\n            selectedImage.eventlayerX = event.layerX;\n            selectedImage.eventlayerY = event.layerY;\n            if (selectedType == \"title\") {\n                // If a title is selected then the position is relative to the upper left corner of the title. Thus we\n                // have to use a correction-value because we store the coordinates that belong to the image.\n                selectedImage.titlecorrectorY = selectedImage.fontsize * selectedImage.titlelineheight;\n            } else {\n                selectedImage.titlecorrectorY = 0;\n            }\n        }\n    }\n\n    /**\n     * At the end of drag update the inputfield and set the coordinates into the attribute of the image.\n     *\n     * @param {event} event\n     */\n    function dragEnd(event) {\n        let snap = 1;\n        let snapelement = document.getElementById('unilabeltype-imageboard-snap');\n        if (snapelement !== null && Number.isInteger(Number(snapelement.value))) {\n            snap = snapelement.value;\n        }\n\n        if (selectedImage.number !== null) {\n            // Information: snap is an integer and allows to use an snapping grid.\n            // xposition = 123 with snap 10 will be calculated to 120.\n            // xposition = 123 with snap 100 will be calculated to 10.\n            let xposition = calculateXposition(event, snap);\n            let yposition = calculateYposition(event, snap);\n            selectedImage.itemToMove.style.left = xposition + selectedImage.titlecorrectorX + \"px\";\n            selectedImage.itemToMove.style.top = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY) + \"px\";\n\n            // Change the inputfield.\n            const inputPositionX = document.getElementById('id_unilabeltype_imageboard_xposition_' + (selectedImage.number));\n            inputPositionX.value = xposition;\n\n            const inputPositionY = document.getElementById('id_unilabeltype_imageboard_yposition_' + (selectedImage.number));\n            inputPositionY.value = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY);\n\n            let coordinates = document.getElementById('unilabel-imageboard-coordinates-' + selectedImage.number);\n            coordinates.innerHTML = (parseInt(selectedImage.number) + 1) + \": \" +\n                inputPositionX.value + \" / \" + inputPositionY.value;\n\n            // Reset saved image data\n            selectedImage.number = null;\n            selectedImage.titlecorrectorY = 0;\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateXposition(event, snap) {\n        let canvasboundings = canvas.getBoundingClientRect();\n        let xposition = event.clientX - canvasboundings.left - selectedImage.eventlayerX;\n\n        if (xposition < 0) {\n            xposition = 0;\n        }\n        if (xposition >= canvaswidth - selectedImage.width) {\n            xposition = canvaswidth - selectedImage.width;\n        }\n        return Math.round(xposition / snap) * snap;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateYposition(event, snap) {\n        var canvasboundings = canvas.getBoundingClientRect();\n        var yposition = event.clientY - canvasboundings.top - selectedImage.eventlayerY;\n        if (yposition < 0) {\n            yposition = 0;\n        }\n        if (yposition >= canvasheight - selectedImage.height) {\n            yposition = canvasheight - selectedImage.height;\n        }\n        return Math.round(yposition / snap) * snap;\n    }\n};\n"],"names":["selectedImage","number","src","itemToMove","eventlayerX","eventlayerY","width","height","titlecorrectorX","titlecorrectorY","canvas","canvaswidth","canvasheight","dragStart","event","selectedType","explicitOriginalTarget","classList","contains","target","getAttribute","split","imagedata","imageids","title","titlecolor","titlebackgroundcolor","titlelineheight","fontsize","xposition","yposition","targetwidth","targetheight","border","borderradius","document","getElementById","value","imagetag","getElementsByTagName","length","getAllImagedataFromForm","layerX","layerY","dragEnd","snap","snapelement","Number","isInteger","canvasboundings","getBoundingClientRect","clientX","left","Math","round","calculateXposition","clientY","top","calculateYposition","style","parseInt","inputPositionX","inputPositionY","innerHTML","clientWidth","clientHeight","addEventListener"],"mappings":"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"}