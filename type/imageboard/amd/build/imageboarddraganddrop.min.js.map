{"version":3,"file":"imageboarddraganddrop.min.js","sources":["../src/imageboarddraganddrop.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import log from 'core/log';\n\nexport const init = () => {\n    // Create an array selectedImage to be able to store some data about the selected image that is moved.\n    let selectedImage = {};\n    selectedImage.number = null;\n    selectedImage.number = null;\n    selectedImage.src = '';\n    // ItemToMove is the div that the selected image is inside AND the title. We do NOT move the image we move the itemtomove-div.\n    selectedImage.itemToMove = null;\n    // ToDo: Add documentation about xoffset?\n    selectedImage.eventlayerX = 0;\n    selectedImage.eventlayerY = 0;\n    selectedImage.width = null;\n    selectedImage.height = null;\n    selectedImage.titlecorrectorX = 0;\n    selectedImage.titlecorrectorY = 0;\n\n    // Store the data about the canvas/background.\n    let canvas = null;\n    let canvaswidth = 950;\n    let canvasheight = 400;\n\n    registerDnDListener();\n\n    /**\n     *  We need two event listeners for drag and drop. One when the dragging starts and one when it ends.\n     */\n    function registerDnDListener() {\n        setTimeout(function() {\n            canvas = document.getElementById(\"unilabel-imageboard-background-canvas\");\n            canvas.addEventListener(\"dragstart\", dragStart, false);\n            canvas.addEventListener(\"dragend\", dragEnd, false);\n        }, 1000);\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragStart(event) {\n        // Check if title or image is selected because this leads to different offsets.\n        // We have to do different calculation of x and y position.\n        let selectedType = \"nix\";\n        if (event &&\n            event.explicitOriginalTarget &&\n            event.explicitOriginalTarget.classList &&\n            event.explicitOriginalTarget.classList.contains('unilabel-imageboard-image')) {\n            selectedType = \"image\";\n        } else {\n            selectedType = \"title\";\n        }\n        // ToDo: Check this condition ....  shouldnt it check         selectedType = \"image\"\n        if (event && event.target && event.target.classList.contains('unilabel-imageboard-element-draggable')) {\n            // Image was selected, so we have to store the information about this image.\n            // 1. Get the number of the selected element.\n            let number = event.target.getAttribute('id').split('unilabel-imageboard-element-')[1];\n            // 2. Get imagedata of the selected element.\n            let imagedata = getAllImagedataFromForm(number);\n            // 3. Set the number of the selected image so this image can be updated when dragEnds.\n            selectedImage.number = number;\n            // 4. Collect the other information.\n            selectedImage.title = imagedata.title;\n            selectedImage.titlelineheight = imagedata.titlelineheight;\n            selectedImage.fontsize = imagedata.fontsize;\n            selectedImage.width = imagedata.targetwidth;\n            selectedImage.height = imagedata.targetheight;\n            selectedImage.border = imagedata.border;\n            selectedImage.borderradius = imagedata.borderradius;\n            selectedImage.itemToMove = document.getElementById('unilabel-imageboard-element-' + selectedImage.number);\n            // Attention: layerX and layerY is the relative position of the mouseposition inside div.\n            // So div is the image or the title and the layer depends on this according to the complete element.\n            selectedImage.eventlayerX = event.layerX;\n            selectedImage.eventlayerY = event.layerY;\n            if (selectedType == \"title\") {\n                // If a title is selected then the position is relative to the upper left corner of the title. Thus we\n                // have to use a correction-value because we store the coordinates that belong to the image.\n                selectedImage.titlecorrectorY = selectedImage.fontsize * selectedImage.titlelineheight;\n            } else {\n                selectedImage.titlecorrectorY = 0;\n            }\n        }\n    }\n\n    /**\n     * At the end of drag update the inputfield and set the coordinates into the attribute of the image.\n     *\n     * @param {event} event\n     */\n    function dragEnd(event) {\n        let snap = 1;\n        let snapelement = document.getElementById('unilabeltype-imageboard-snap');\n        if (snapelement !== null && Number.isInteger(Number(snapelement.value))) {\n            snap = snapelement.value;\n        }\n        if (selectedImage.number !== null) {\n            // Information: snap is an integer and allows to use an snapping grid.\n            // xposition = 123 with snap 10 will be calculated to 120.\n            // xposition = 123 with snap 100 will be calculated to 10.\n            let xposition = calculateXposition(event, snap);\n            let yposition = calculateYposition(event, snap);\n\n            // Den Imagesettings-Dialog neben dem Mauszeiger anzeigen.\n            showimagesettingsdiv();\n\n            // Die mform aktiasieren;\n            updateform(selectedImage.number, xposition, yposition);\n            // Den Imagesettings-Anzeigebereich aktualisieren\n            updateimagesettings(selectedImage, xposition, yposition);\n\n            // Update the Position of the image\n            selectedImage.itemToMove.style.left = xposition + selectedImage.titlecorrectorX + \"px\";\n            selectedImage.itemToMove.style.top = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY) + \"px\";\n\n            let coordinates = document.getElementById('unilabel-imageboard-coordinates-' + selectedImage.number);\n            coordinates.innerHTML = (parseInt(selectedImage.number) + 1) + \": \" +\n                xposition + \" / \" + yposition;\n\n            // Reset saved image data\n            selectedImage.number = null;\n            selectedImage.titlecorrectorY = 0;\n        }\n    }\n\n    /**\n     *\n     */\n    function showimagesettingsdiv() {\n        let imagesettingsdiv = document.getElementById(\"id-unilabeltype-imageboard-imagesettings\");\n        let canvasboundings = canvas.getBoundingClientRect();\n        const offsetX = event.clientX - canvasboundings.left;\n        const offsetY = event.clientY - canvasboundings.top;\n        imagesettingsdiv.style.left = offsetX + \"px\";\n        imagesettingsdiv.style.top = offsetY + \"px\";\n        imagesettingsdiv.style.visibility = 'visible';\n    }\n\n    /**\n     *\n     * @param {number} number\n     * @param {string} xposition\n     * @param {string} yposition\n     */\n    function updateform(number, xposition, yposition) {\n        // Change the inputfield in form.\n        const inputPositionX = document.getElementById('id_unilabeltype_imageboard_xposition_' + (selectedImage.number));\n        inputPositionX.value = xposition;\n\n        const inputPositionY = document.getElementById('id_unilabeltype_imageboard_yposition_' + (selectedImage.number));\n        inputPositionY.value = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY);\n    }\n\n    /**\n     * Call this function after drag and drop end or if input fields in form where changed.\n     * @param {selectedImage} selectedImage image that was changed\n     * @param {xposition} xposition\n     * @param {yposition} yposition\n     */\n    function updateimagesettings(selectedImage, xposition, yposition) {\n\n        // Den Imagesettings-Anzeigebereich aktualisieren\n        const imagesettingsNumber = document.getElementById('id-unilabeltype-imageboard-imagesettings-number');\n        imagesettingsNumber.innerHTML = (parseInt(selectedImage.number) + 1);\n\n        const imagesettingsTitle = document.getElementById('id-unilabeltype-imageboard-imagesettings-title');\n        imagesettingsTitle.value = selectedImage.title;\n\n        const imagesettingsInputPositionX = document.getElementById('id-unilabeltype-imageboard-imagesettings-xposition');\n        imagesettingsInputPositionX.value = parseInt(xposition) + parseInt(selectedImage.titlecorrectorX);\n        const imagesettingsInputPositionY = document.getElementById('id-unilabeltype-imageboard-imagesettings-yposition');\n        imagesettingsInputPositionY.value = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY);\n        const imagesettingsInputBorder = document.getElementById('id-unilabeltype-imageboard-imagesettings-border');\n        imagesettingsInputBorder.value = parseInt(selectedImage.border);\n\n        const imagesettingsInputBorderradius = document.getElementById('id-unilabeltype-imageboard-imagesettings-borderradius');\n        imagesettingsInputBorderradius.value = parseInt(selectedImage.borderradius);\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateXposition(event, snap) {\n        let canvasboundings = canvas.getBoundingClientRect();\n        let xposition = event.clientX - canvasboundings.left - selectedImage.eventlayerX;\n\n        if (xposition < 0) {\n            xposition = 0;\n        }\n        if (xposition >= canvaswidth - selectedImage.width) {\n            xposition = canvaswidth - selectedImage.width;\n        }\n        return Math.round(xposition / snap) * snap;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateYposition(event, snap) {\n        var canvasboundings = canvas.getBoundingClientRect();\n        var yposition = event.clientY - canvasboundings.top - selectedImage.eventlayerY;\n        if (yposition < 0) {\n            yposition = 0;\n        }\n        if (yposition >= canvasheight - selectedImage.height) {\n            yposition = canvasheight - selectedImage.height;\n        }\n        return Math.round(yposition / snap) * snap;\n    }\n};\n"],"names":["selectedImage","number","src","itemToMove","eventlayerX","eventlayerY","width","height","titlecorrectorX","titlecorrectorY","canvas","dragStart","event","selectedType","explicitOriginalTarget","classList","contains","target","getAttribute","split","imagedata","imageids","title","titlecolor","titlebackgroundcolor","titlelineheight","fontsize","xposition","yposition","targetwidth","targetheight","border","borderradius","document","getElementById","value","imagetag","getElementsByTagName","length","getAllImagedataFromForm","layerX","layerY","dragEnd","snap","snapelement","Number","isInteger","canvasboundings","getBoundingClientRect","clientX","left","Math","round","calculateXposition","clientY","top","calculateYposition","showimagesettingsdiv","parseInt","updateform","innerHTML","updateimagesettings","style","imagesettingsdiv","offsetX","offsetY","visibility","setTimeout","addEventListener"],"mappings":"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"}